openapi: 3.0.3
info: 
  title: WASAPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can upload your photos directly from your PC, and they will be visible to everyone following you.
    
    ### Functional design specifications
    Each user will be presented with a stream of photos (images) in reverse chronological order, with information about when each photo was uploaded (date and time) and how many likes and comments it has. The stream is composed by photos from “following” (other users that the user follows). 
    
    Users can place (and later remove) a "like" to photos from other users. Also, users can add comments to any image (even those uploaded by themself). Only authors can remove their comments. 
    
    Users can ban other users. If user Alice bans user Eve, Eve won't be able to see any information about Alice. Alice can decIde to remove the ban at any moment. 
    
    Users will have their profiles. The personal profile page for the user shows: the user's photos (in reverse chronological order), how many photos have been uploaded, and the user's followers and following. 
    
    Users can change their usernames, upload photos, remove photos, and follow/unfollow other users. Removal of an image will also remove likes and comments. 
    
    A user can search other user profiles via username. 
    
    A user can log in just by specifying the username. See the "Simplified login" section for details.

    ### Simplified login
    In real-world scenarios, new developments avoId implementing registration, login, and password-lost flows as they are a security nightmare, cumbersome, error-prone, and outsIde the project scope. So, why lose money and time on implementing those? The best practice is now to delegate those tasks to a separate service (“Identity provIder”), either in-house (owned by the same company) or a third party (like “Login with Apple/Facebook/Google” buttons). 
    
    In this project, we do not have an external service like this. Instead, we decIded to provIde you with a specification for a login API so that you won't spend time dealing with the design of the endpoint. The provIded OpenAPI document is at the end of this PDF. 
    
    The login endpoint accepts a username - like “Maria” - without any password. If the username already exists, the user is logged in. If the username is new, the user is registered and logged in. The API will return the user Identifier you need to pass into the Authorization header in any other API. 
    
    This authentication method is named "Bearer Authentication" (however, in this project, you should use the user Identifier in place of the token):
      - https://swagger.io/docs/specification/authentication/bearer-authentication/
      - https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication
      - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization
    
    There is no need either for HTTP sessions or session cookies.

    ## OpenAPI
    You will need to define different APIs from the requirements above. For each API, you must define the operationId key. We expect to find at least these operation Ids:
      - *doLogin (see simplified login)*
      - *setMyUserName*
      - *uploadPhoto*
      - *followUser*
      - *unfollowUser*
      - *banUser*
      - *unbanUser*
      - *getUserProfile*
      - *getMyStream*
      - *likePhoto*
      - *unlikePhoto*
      - *commentPhoto*
      - *uncommentPhoto*
      - *deletePhoto*
    
    ## CORS
    The backend must reply to CORS pre-flight requests with the appropriate setting.
    
    To avoId problems during the homework grading, you should allow all origins and you should set the "Max-Age" attribute to 1 second. See the examples code in the Fantastic Coffee decaffeinated repository.
  version: 0.0.1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      title: User
      description: "This object represents a single user"
      type: object
      properties:
        username:
          description: Unique user identifier
          type: string
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
          example: Maria
          readOnly: false
        banned:
          description: List of banned users
          type: array
          minItems: 0
          maxItems: 999999
          items: {$ref: "#/components/schemas/User"}
          example: ["Gino", "Gianni"]
          readOnly: false
    Profile:
      title: Profile
      description: "This object represents the personal profile of a user"
      type: object
      properties:
        user: {$ref: "#/components/schemas/User"}
        photos:
          description: List of photos uploaded
          type: array
          minItems: 0
          maxItems: 999999
          items: {$ref: "#/components/schemas/Photo"}
          example: ["pollo.png", "paesaggio.png"]
          readOnly: false
        photoNumber:
          description: Number of photos uploaded
          type: integer
          example: 1
          readOnly: false
        followers:
          description: A collection of users that follow User
          type: array
          minItems: 0
          maxItems: 999999
          items: {$ref: "#/components/schemas/User"}
          example: ["Giulia", "Francesco"]
          readOnly: false
        following:
          description: A collection of users followed by User
          type: array
          minItems: 0
          maxItems: 999999
          items: {$ref: "#/components/schemas/User"}
          example: ["Paolo", "Gino"]
          readOnly: false
    Photo:
      title: Photo
      description: "This object represents a photo uploaded by a user"
      type: object
      properties:
        photoId:
          description: Unique photo identifier
          type: integer
          example: 1
          readOnly: true
        uploader: {$ref: "#/components/schemas/User"}
        image:
          title: Image
          description: "This is the image contained in the photo"
          type: object
          properties:
            link:
              description: A link to the image
              type: string
              format: url
              example: "https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Unicode_0x0053.svg/800px-Unicode_0x0053.svg.png"
              readOnly: true
        uploadTime:
          description: When the photo was uploaded
          type: string
          format: date-time
          example: 2020-11-10T17:05:50Z
          readOnly: true
        likes:
          description: A collection of the likes the photo received
          type: array
          minItems: 0
          maxItems: 999999
          items: {$ref: "#/components/schemas/Like"}
          readOnly: false
        likeNumber:
          description: Number of likes of the photo
          type: integer
          example: 100
          readOnly: false
        comments:
          description: A collection of the comments the photo received
          type: array
          minItems: 0
          maxItems: 999999
          items: {$ref: "#/components/schemas/Comment"}
          readOnly: false
        commentNumber:
          description: Number of comments of the photo
          type: integer
          example: 50
          readOnly: false
    Like:
      title: Like
      description: "This object represents a single like"
      type: object
      properties:
        likeId:
          description: Unique like identifier
          type: integer
          example: 1
          readOnly: true
        liker: {$ref: "#/components/schemas/User"}
    Comment:
      title: Comment
      description: "This object represents a single comment"
      type: object
      properties:
        commentId:
          description: Unique comment identifier
          type: integer
          example: 1
          readOnly: true
        commenter: {$ref: "#/components/schemas/User"}
        content:
          description: The content of a comment
          type: string
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
          example: Nice photo!
          readOnly: true
        commentTime: 
          description: When the comment was made
          type: string
          format: date-time
          example: 2020-11-10T17:05:50Z
          readOnly: true
security:
  - bearerAuth: []
paths:
  /session:
    post:
      security: []
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: integer
                    example: 1

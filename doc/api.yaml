openapi: 3.0.3
info:
  title: WASAPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can upload your
    photos directly from your PC, and they will be visible to everyone following you.

    ### Functional design specifications
    Each user will be presented with a stream of photos (images) in reverse chronological order, with information
    about when each photo was uploaded (date and time) and how many likes and comments it has. The stream is composed
    by photos from “following” (other users that the user follows).

    Users can place (and later remove) a "like" to photos from other users. Also, users can add comments to any image
    (even those uploaded by themself). Only authors can remove their comments.

    Users can ban other users. If user Alice bans user Eve, Eve won't be able to see any information about Alice.
    Alice can decide to remove the ban at any moment.

    Users will have their profiles. The personal profile page for the user shows: the user's photos
    (in reverse chronological order), how many photos have been uploaded, and the user's followers and following.

    Users can change their usernames, upload photos, remove photos, and follow/unfollow other users.
    Removal of an image will also remove likes and comments.

    A user can search other user profiles via username.

    A user can log in just by specifying the username. See the "Simplified login" section for details.

    ### Simplified login
    In real-world scenarios, new developments avoId implementing registration, login, and
    password-lost flows as they are a security nightmare, cumbersome, error-prone, and
    outsIde the project scope. So, why lose money and time on implementing those?
    The best practice is now to delegate those tasks to a separate service
    (“Identity provIder”), either in-house (owned by the same company) or a third party
    (like “Login with Apple/Facebook/Google” buttons).

    In this project, we do not have an external service like this. Instead, we decIded to
    provIde you with a specification for a login API so that you won't spend time dealing
    with the design of the endpoint. The provIded OpenAPI document is at the end of this PDF.

    The login endpoint accepts a username - like “Maria” - without any password. If the
    username already exists, the user is logged in. If the username is new, the user is
    registered and logged in. The API will return the user Identifier you need to pass i
    nto the Authorization header in any other API.

    This authentication method is named "Bearer Authentication" (however, in this
    project, you should use the user Identifier in place of the token):
      - https://swagger.io/docs/specification/authentication/bearer-authentication/
      - https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication
      - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization

    There is no need either for HTTP sessions or session cookies.

    ## OpenAPI
    You will need to define different APIs from the requirements above. For each API, you must define the operationId key. We expect to find at least these operation Ids:
      - *doLogin (see simplified login)*
      - *setMyUserName*
      - *uploadPhoto*
      - *followUser*
      - *unfollowUser*
      - *banUser*
      - *unbanUser*
      - *getUserProfile*
      - *getMyStream*
      - *likePhoto*
      - *unlikePhoto*
      - *commentPhoto*
      - *uncommentPhoto*
      - *deletePhoto*

    ## CORS
    The backend must reply to CORS pre-flight requests with the appropriate setting.

    To avoId problems during the homework grading, you should allow all origins and you should set the "Max-Age" attribute to 1 second. See the examples code in the Fantastic Coffee decaffeinated repository.
  version: 0.1.0
tags:
  - name: login
    description: Login operations
  - name: view
    description: Operations to search and view data
  - name: modifyProfile
    description: Operations to modify the user profile
  - name: profileInteractions
    description: Operations to interact with other users
  - name: photoInteractions
    description: Operations to interact with photos
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    username:
      schema: {$ref: "#/components/schemas/User/properties/username"}
      name: username
      in: path
      required: true
      description: User ID
    photo_id:
      schema: {$ref: "#/components/schemas/Photo/properties/photoId"}
      name: photoId
      in: path
      required: true
      description: Photo ID
    comment_id:
      schema: { $ref: "#/components/schemas/Comment/properties/commentId" }
      name: commentId
      in: path
      required: true
      description: Comment ID
    like_id:
      schema: {$ref: "#/components/schemas/Like/properties/likeId"}
      name: likeId
      in: path
      required: true
      description: Like ID
  schemas:
    User:
      title: User
      description: "This object represents a single user"
      type: object
      properties:
        userId:
          description: Unique user identifier
          type: integer
          readOnly: true
        username:
          description: Unique user name
          type: string
          pattern: ˆ.*?$
          minLength: 3
          maxLength: 16
          example: Maria
          readOnly: false
        profile: {$ref: "#/components/schemas/Profile"}
    Profile:
      title: Profile
      description: "This object represents the profile of a single user"
      type: object
      properties:
        profileId:
          description: Unique profile identifier
          type: integer
          readOnly: true
        profileName:
          description: Unique profile name
          type: string
          pattern: ˆ.*?$
          minLength: 3
          maxLength: 16
          example: Maria
          readOnly: false
        photoNumber:
          description: How many photos the profile has
          type: integer
          readOnly: false
    Photo:
      title: Photo
      description: "This object represents a single photo object"
      type: object
      properties:
        photoId:
          description: Unique photo identifier
          type: integer
          readOnly: true
        uploader: {$ref: "#/components/schemas/User"}
        uploadTime:
          description: When the photo was uploaded
          type: string
          format: date-time
          example: "2024-03-20 18:06:50"
          readOnly: true
        likeNumber:
          description: How many likes the photo has
          type: integer
          readOnly: false
        commentNumber:
          description: How many comments the photo has
          type: integer
          readOnly: false
        image:
          description: The image
          type: string
          format: link
          example: "image.png"
          readOnly: true
    Comment:
      title: Comment
      description: "This object represents a single comment object"
      type: object
      properties:
        commentId:
          description: Unique comment identifier
          type: integer
          readOnly: true
        commenter: {$ref: "#/components/schemas/User"}
        commentTime:
          description: When the comment was uploaded
          type: string
          format: date-time
          example: "2024-03-20 18:06:50"
          readOnly: true
        content:
          description: The text of the comment
          type: string
          pattern: ˆ.*?$
          minLength: 1
          maxLength: 99999
          example: Wow!
          readOnly: true
        photoComment: {$ref: "#/components/schemas/Photo"}
    Like:
      title: Like
      description: "This object represents a single like object"
      type: object
      properties:
        likeId:
          description: Unique like identifier
          type: integer
          readOnly: true
        liker: { $ref: "#/components/schemas/User" }
        photoLiked: { $ref: "#/components/schemas/Photo" }
  responses:
    204NoContent:
      description: The request was completed with no return value
    400BadRequest:
      description: Bad Request
    401Unauthorized:
      description: Operation not authorized
    404NotFound:
      description: Resource not found
    409Conflict:
      description: The response is conflicting with the state of the resource


security:
  - bearerAuth: []
paths:
  /session/:
    post:
      security: []
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: ˆ.*?$
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: integer
                    example: 1
  /users/{username}/:
    parameters:
      - $ref: "#/components/parameters/username"
    get:
      operationId: getUserProfile
      tags: [ "view" ]
      summary: Search user profile
      description: |-
        This method is used to search for a user with a specific username. The username is in the
        query. Returns the profile of the user.
      parameters:
        - name: username
          in: query
          required: false
          description: Username of the user searched
          schema:
            type: string
            pattern: 'ˆ.*?$'
            minLength: 3
            maxLength: 16
        - name: id
          in: query
          required: false
          description: Id of the user searched
          schema:
            type: integer
      responses:
        "302":
          description: Profile found successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/400BadRequest" }
        "401": { $ref: "#/components/responses/401Unauthorized" }
        "404": { $ref: "#/components/responses/404NotFound" }
  /users/{userId}:
    parameters:
      - $ref: "#/components/parameters/user_id"
    put:
      operationId: setMyUserName
      tags: ["modifyProfile"]
      summary: Update username
      description: |-
        This method sets a new username for the associated user.
        We replace the user with a username-changed user, present in the body of the request.
        Returns the new user.
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/User"}
      responses:
        "201":
          description: Username updated successfully
          content:
            application/json:
              schema: {$ref: "#/components/schemas/User"}
        "404": {$ref: "#/components/responses/404NotFound"}
        "400": {$ref: "#/components/responses/400BadRequest"}
        "401": {$ref: "#/components/responses/401StatusUnauthorized"}
  /users/{userId}/banned/:
    parameters:
    - $ref: "#/components/parameters/user_id"
    post:
      operationId: banUser
      tags: ["profileInteractions"]
      summary: Ban a user
      description: |-
        This method is used to add an existing user to the 'banned' collection.
        The user id is in the body of the request. Return my user.
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/User"}
      responses:
        "201":
          description: User banned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404": {$ref: "#/components/responses/404NotFound"}
        "400": {$ref: "#/components/responses/400BadRequest"}
        "401": {$ref: "#/components/responses/401StatusUnauthorized"}

  /users/{userId}/banned/{bannedId}:
    parameters:
      - $ref: "#/components/parameters/user_id"
      - $ref: "#/components/parameters/banned_id"
    delete:
      operationId: unbanUser
      tags: ["profileInteractions"]
      summary: Unban a user
      description: |-
        This method is used to remove an existing user from the 'banned' collection.
      responses:
        "204": {$ref: "#/components/responses/204Successfull"}
        "404": {$ref: "#/components/responses/404NotFound"}
        "400": {$ref: "#/components/responses/400BadRequest"}
        "401": {$ref: "#/components/responses/401StatusUnauthorized"}
  /users/{userId}/profile/photos/:
    parameters:
      - $ref: "#/components/parameters/user_id"
    post:
      operationId: uploadPhoto
      tags: ["modifyProfile"]
      summary: Upload a photo
      description: |-
        This method adds a new photo to the associated user. The new photo is
        contained in the body of the request. Returns the new photo.
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/Photo"}
      responses:
        "201":
          description: User found successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }
        "400": {$ref: "#/components/responses/400BadRequest"}
        "404": {$ref: "#/components/responses/404NotFound"}
        "401": {$ref: "#/components/responses/401StatusUnauthorized"}
  /users/{userId}/profile/photos/{photoId}:
    parameters:
      - $ref: "#/components/parameters/user_id"
      - $ref: "#/components/parameters/photo_id"
    delete:
      operationId: deletePhoto
      tags: ["modifyProfile"]
      summary: Delete a photo
      description: |-
        This method removes a photo from the associated user.
      responses:
        "204": {$ref: "#/components/responses/204Successfull"}
        "404": {$ref: "#/components/responses/404NotFound"}
        "400": {$ref: "#/components/responses/400BadRequest"}
        "401": {$ref: "#/components/responses/401StatusUnauthorized"}
  /users/{username}/profile/photos/{photoId}/likes/:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/photo_id"
    get:
      operationId: getLikes
      tags: [ "view" ]
      summary: Search likes
      description: |-
        This method is used to find the likes associated with a specific photo. The photo id is
        in the path. Returns the likes.
      responses:
        "302":
          description: Likes found successfully
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Like" }
                minItems: 0
                maxItems: 999999999
        "400": { $ref: "#/components/responses/400BadRequest" }
        "401": { $ref: "#/components/responses/401Unauthorized" }
        "404": { $ref: "#/components/responses/404NotFound" }
    post:
      operationId: likePhoto
      tags: ["photoInteractions"]
      summary: Like a photo
      description: |-
        This method adds a new like to the associated photo. The liker is contained in the body of the request.
        Returns the new like.
      requestBody:
        content:
          application/json:
            schema:
              type: string
              pattern: 'ˆ.*?$'
              minLength: 3
              maxLength: 16
      responses:
        "201":
          description: Like created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Like" }
        "400": {$ref: "#/components/responses/400BadRequest"}
        "401": {$ref: "#/components/responses/401Unauthorized"}
        "404": {$ref: "#/components/responses/404NotFound"}
        "409": {$ref: "#/components/responses/409Conflict"}
  /users/{username}/profile/photos/{photoId}/likes/{likeId}:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/photo_id"
      - $ref: "#/components/parameters/like_id"
    delete:
      operationId: unlikePhoto
      tags: ["photoInteractions"]
      summary: Remove a like
      description: |-
        This method removes a like from the associated photo.
      responses:
        "204": {$ref: "#/components/responses/204NoContent"}
        "400": {$ref: "#/components/responses/400BadRequest"}
        "401": {$ref: "#/components/responses/401Unauthorized"}
        "404": {$ref: "#/components/responses/404NotFound"}
  /users/{username}/profile/photos/{photoId}/comments/:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/photo_id"
    get:
      operationId: getComments
      tags: [ "view" ]
      summary: Search comments
      description: |-
        This method is used to find the comments associated with a specific photo. The photo id is
        in the path. Returns the comments.
      responses:
        "302":
          description: Comments found successfully
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Comment" }
                minItems: 0
                maxItems: 999999999
        "400": {$ref: "#/components/responses/400BadRequest"}
        "401": {$ref: "#/components/responses/401Unauthorized"}
        "404": {$ref: "#/components/responses/404NotFound"}
    post:
      operationId: commentPhoto
      tags: ["photoInteractions"]
      summary: Comment a photo
      description: |-
        This method adds a new comment to the associated photo. Content and commenter are contained in the body of the 
        request.
        Returns the comment.
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/Comment"}
      responses:
        "201":
          description: Comment created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }
        "400": {$ref: "#/components/responses/400BadRequest"}
        "401": {$ref: "#/components/responses/401Unauthorized"}
        "404": {$ref: "#/components/responses/404NotFound"}
  /users/{username}/profile/photos/{photoId}/comments/{commentId}:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/photo_id"
      - $ref: "#/components/parameters/comment_id"
    delete:
      operationId: uncommentPhoto
      tags: ["photoInteractions"]
      summary: Remove a comment
      description: |-
        This method removes a comment from the associated photo.
      responses:
        "204": {$ref: "#/components/responses/204NoContent"}
        "400": {$ref: "#/components/responses/400BadRequest"}
        "401": {$ref: "#/components/responses/401Unauthorized"}
        "404": {$ref: "#/components/responses/404NotFound"}
  /users/{username}/profile/:
    parameters:
      - $ref: "#/components/parameters/username"
    get:
      operationId: getMyStream
      tags: ["view"]
      summary: Get user stream
      description: |-
        This method is used to get the stream of a specified user. The following list is in the path.
        Returns the photos of the users, in reverse chronological order.
      responses:
        "302":
          description: Photos found successfully
          content:
            application/json:
              schema:
                type: array
                items: {$ref: "#/components/schemas/Photo"}
                minItems: 0
                maxItems: 999999999
        "400": {$ref: "#/components/responses/400BadRequest"}
        "401": {$ref: "#/components/responses/401Unauthorized"}
        "404": {$ref: "#/components/responses/404NotFound"}
    post:
      operationId: followUser
      tags: ["profileInteractions"]
      summary: Follow a user
      description: |-
         This method is used to add an existing user to the 'following' collection.
         The user id is in the body of the request. Return the profile followed
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/User"}
      responses:
        "201":
          description: User found successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "400": {$ref: "#/components/responses/400BadRequest"}
        "404": {$ref: "#/components/responses/404NotFound"}
        "401": {$ref: "#/components/responses/401StatusUnauthorized"}
  /users/{userId}/profile/following/{followingId}:
    parameters:
      - $ref: "#/components/parameters/user_id"
      - $ref: "#/components/parameters/following_id"
    delete:
      operationId: unfollowUser
      tags: ["profileInteractions"]
      summary: Unfollow a user
      description: |-
        This method is used to remove an existing user to the 'following' collection.
      responses:
        "204": {$ref: "#/components/responses/204Successfull"}
        "404": {$ref: "#/components/responses/404NotFound"}
        "400": {$ref: "#/components/responses/400BadRequest"}
        "401": {$ref: "#/components/responses/401StatusUnauthorized"}
